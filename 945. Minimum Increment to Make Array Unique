Approach : sorting + greedy

Time complexity : O(nlogn)
Space complexity : O(1)

class Solution {
    public int minIncrementForUnique(int[] nums) {
        Arrays.sort(nums);
        int moves = 0;

        for(int i=1;i<nums.length;i++){
            if(nums[i] <= nums[i-1]){
                moves += (nums[i-1] - nums[i] +1);
                nums[i] = nums[i-1]+1;
            }
        }
        return moves;
    }
}

Approach 2 : counting sort

Time complexity : O(n + maxValue)
Space complexity : O(n+maxValue)

class Solution {
    public int minIncrementForUnique(int[] nums) {
        int maxValue = Integer.MIN_VALUE;
        int n = nums.length;

        for(int num : nums){
            if(num > maxValue){
                maxValue = num;
            }
        }

        int freq[] = new int[n + maxValue];
        int moves = 0;

        for(int num : nums){
            freq[num]++;
        }

        for(int i=0;i<freq.length;i++){
            if(freq[i] <= 1) continue;

            int extra = freq[i] -1;
            freq[i+1] += extra;
            moves += extra;
        }
        return moves;       
    }
}
